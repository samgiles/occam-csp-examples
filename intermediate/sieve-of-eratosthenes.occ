--
--  Sieve of Eratosthenes
--
--  Author: Sam Giles
--  Date:   23 April 2014
--  License: GPLv2
--
--  Notes:
--  http://stackoverflow.com/questions/23245906/what-is-the-simplest-way-of-terminating-poisoning-a-producer-process-in-occam

#INCLUDE "course.module"

PROTOCOL CONTROL
  CASE
    poison
:

PROTOCOL TAGGED.INT
  CASE
    normal; INT
    poison
:


PROC from(VAL INT start, VAL INT step, CHAN OF TAGGED.INT cout!, CHAN OF CONTROL control?)
  INT count:
  INITIAL BOOL running IS TRUE:
  SEQ
    count := start
    WHILE running
      SEQ
        PRI ALT
          -- Check control for poison
          control ? poison
            SEQ
              running := FALSE
              cout ! poison
          SKIP
            SEQ
              -- In order to terminate this process correctly
              -- we'll need a _black hole_ process
              -- to consume any values this process tries to
              -- send before we can check the control channel
              cout ! normal; count
              count := count + step
:

PROC blackhole(CHAN OF TAGGED.INT chan?)
  -- Consume all values on chan until poison is received
  INITIAL BOOL consuming IS TRUE:
  WHILE consuming
    INT any:
    chan ? CASE
      normal; any
        -- Normal value received so skip
        SKIP
      poison
        -- Poison received, close the black hole
        consuming := FALSE
:

PROC filter(VAL INT n, CHAN OF TAGGED.INT left?, right!)
  INT val:
  INITIAL BOOL running IS TRUE:
  WHILE running
    SEQ
      left ? CASE
        normal; val
          -- In the normal case, check for primality potential
          -- And continue, passing to the right if val is not a
          -- factor of n
          IF
            (val \ n) <> 0
              -- Pass val to next
              -- The black hole at the end of the sieve should keep
              -- this moving
              right ! normal; val
            TRUE
              -- Drop val from the sieve and continue
              SKIP
        poison
          -- Received a poison notification
          -- no more values will be sent from the left
          -- Stop this process from running and
          -- forward the poison notification to the
          -- right
          SEQ
            running := FALSE
            right ! poison
:

REC PROC sieve(VAL INT count, CHAN TAGGED.INT left?, CHAN OF TAGGED.INT cout!, CHAN OF CONTROL control!)
  -- left? is the output from the previous filter
  -- cout! is the channel on which all prime numbers should be output
  INT n:
  SEQ
    -- Output prime number 'n'
    left ? normal; n
    cout ! normal; n
    IF
      -- Recursion control here, if count is 0 blackhole the output
      -- of the last filter (which will shutdown nicely when we poison the
      -- chain of filters)
      count <= 0
        -- This blackhole process should continue to pull values through the
        -- filter chain, and consequently pull the poison event through,
        -- STOPing the filter process
        SEQ
          PAR
            control ! poison
            blackhole(left?)
          cout ! poison
      TRUE
        CHAN OF TAGGED.INT newchan:
        PAR
          -- Create the next filter in the chain which passes values from cin, to
          -- cout, if poison is received on cin, the filter process is marked
          -- to stop, and the poison event is propagated

          -- The initial 'cin' should be the output from the producer,
          -- and as per the IF control above, the final output should be into
          -- the blackhole process.
          --
          -- [producer] -> [filter] -> [filter] -> [filter] -> [blackhole]
          --     ^
          --      \
          --       <control> The control triggers a poison event in the producer, which is then
          --  propagated
          filter(n, left?, newchan!)
          -- Create the next level of the sieve recursively
          sieve(count - 1, newchan?, cout!, control!)
:

PROC nprimes(VAL INT limit, CHAN OF TAGGED.INT cout!)
  CHAN OF TAGGED.INT c:
  CHAN OF TAGGED.INT p:
  CHAN OF CONTROL control:
  PAR
    -- Create a producer process and the root sieve process.  When the control
    -- is poisoned, the producer will finialise with a single poison value,
    -- poisoning the filter chain created by sieve
    from(2, 1, c!, control?)
    sieve(limit - 1, c?, p!, control!)
    INT pnum:
    INITIAL BOOL running IS TRUE:
    SEQ
      WHILE running
        SEQ
          p ? CASE
            normal; pnum
              SEQ
                cout ! normal; pnum
            poison
              SEQ
                running := FALSE
                -- Notify the listening process that no more values are going to be
                -- emitted by this process on cout
                cout ! poison
:

PROC sumnprimes(VAL INT limit, CHAN OF INT result!)
  INITIAL BOOL running IS TRUE:
  CHAN OF TAGGED.INT p:
  INITIAL INT sum IS 0:
  PAR
    nprimes(limit, p!)
    WHILE running
      INT temp:
      SEQ
        p ? CASE
          normal; temp
            SEQ
              sum := sum + temp
          poison
            SEQ
              running := FALSE
              result ! sum

:

PROC printnprimes(VAL INT limit, CHAN OF BYTE scr!)
  INITIAL BOOL running IS TRUE:
  CHAN OF TAGGED.INT p:
  PAR
    nprimes(limit, p!)
    WHILE running
      INT temp:
      SEQ
        p ? CASE
          normal; temp
            SEQ
              out.int(temp, 0, scr!)
              out.string("*n", 0, scr!)
          poison
            SEQ
              running := FALSE
:


PROC printsumnprimes(VAL INT limit, CHAN OF BYTE scr!)
  CHAN OF INT result:
  PAR
    sumnprimes(limit, result!)
    INT sum:
    SEQ
      result ? sum
      out.int(sum, 0, scr!)
      out.string("*n", 0, scr!)
:

PROC run (CHAN OF BYTE kyb?, scr!, err!)
  printsumnprimes(1000, scr!)
:
